package ReactionList;

use strict;
use warnings;
use File::Spec;
use LibSBML;
use FindBin;
use lib $FindBin::Bin;
use IO::Handle;
use Class::Struct;
use Reaction;
use Utils;

{
	struct ReactionList =>
	{
		Array	=>	'@' 	#	array of reactions
	};

	sub addGeneralRxns {
		my $rxnlist=shift;
		my ($rudex,		#	rule index
			$comp0name,	#	compartment where this reaction occurs
			$reArray,	#	reactants
			$moArray,	#	modifiers
			$prArray,	#	products
			$formula,	#	kinetic law
			$coef		#	factor
		)=(@_);
		if (my $rxn=$rxnlist->findReaction($rudex,$reArray,$moArray,$prArray)) {
			$rxn->Prefac($rxn->Prefac+$coef);
		}
		else {#	new reaction
			my $rindex=$#{$rxnlist->Array}+2;
			my ($expr,undef,$err)=Expression->newExpression($formula,'algebra');
			if ($err) { return $err; }
			else {
				my $newRxn=Reaction->new(
					Name=>"r".$rindex,
					RuleIndex=>$rudex,
					Rate=>$expr,
					Prefac=>$coef,
					sbmlVolumeFactor=>$comp0name
				);
				foreach my $re (@{$reArray}){ 
					push @{$newRxn->Lhs}, $re; 
				}
				foreach my $mo (@{$moArray}){ 
					push @{$newRxn->Mds}, $mo; 
				}
				foreach my $pr (@{$prArray}){ 
					push @{$newRxn->Rhs}, $pr; 
				}
				if ($err=$rxnlist->add($newRxn)) { return $err; }
			}
		}
		return '';
	}

	sub findReaction {#	find same reaction generated by same rule
		my $rxnlist=shift;
		my ($rudex,$reArray,$moArray,$prArray)=(@_);
		foreach my $rxn (@{$rxnlist->Array}) {
			next unless $rxn->RuleIndex;
			next unless $rxn->RuleIndex eq $rudex;
			next unless diff_array($rxn->Lhs,$reArray);
			next unless diff_array($rxn->Mds,$moArray);
			next unless diff_array($rxn->Rhs,$prArray);
			return $rxn;
		}
		return '';
	}

	#	----------------------------
	#	Four reactions are involved:
	#	[1] empty -> Ae, N*pout*[A]
	#	[2] Ae -> empty, N*pin*[Ae]
	#	[3] empty -> A, pin*[Ae]
	#	[4] A -> empty, pout*[A]
	#	----------------------------
	sub addTransportationRxns {
		my $rxnlist=shift;
		my ($Ae,$A,$cout,$cin,$pout,$pin,$N)=(@_);	
		my ($rxn,$expr,$index,$err)=('','','','');
		my (@lhs,@mds,@rhs)=((),(),());

		my ($k1,$k2,$k3,$k4)=('0','0','0','0');
		if ($pout) { 
			$k1=$k4="$pout*$A"; 
		} 
		if ($pin) { 
			$k2=$k3="$pin*$Ae"; 
		}
		if ($N) { $k1="$N*$k1"; $k2="$N*$k2"; }

		#	[1] empty -> Ae, N*pout*[A]
		if ($k1 ne '0') {
			$index=$#{$rxnlist->Array}+2;
			($expr,undef,$err)=Expression->newExpression($k1,'algebra');
			if ($err) { return $err; }
			$rxn=Reaction->new(
				Name=>"r".$index,
				Rule=>"transportation",
				Rate=>$expr,
				Prefac=>1,
				sbmlVolumeFactor=>$cout
			);
			push @{$rxn->Mds}, $A;
			push @{$rxn->Rhs}, $Ae;
			if ($err=$rxnlist->add($rxn)) { return $err; }
		}
		
		#	[2] Ae -> empty, N*pin*[Ae]
		if ($k2 ne '0') {
			$index=$#{$rxnlist->Array}+2;
			($expr,undef,$err)=Expression->newExpression($k2,'algebra');
			if ($err) { return $err; }
			$rxn=Reaction->new(
				Name=>"r".$index,
				Rule=>"transportation",
				Rate=>$expr,
				Prefac=>1,
				sbmlVolumeFactor=>$cout
			);
			push @{$rxn->Lhs}, $Ae;
			if ($err=$rxnlist->add($rxn)) { return $err; }
		}

		#	[3] empty -> A, pin*[Ae]
		if ($k3 ne '0') {
			$index=$#{$rxnlist->Array}+2;
			($expr,undef,$err)=Expression->newExpression($k3,'algebra');
			if ($err) { return $err; }
			$rxn=Reaction->new(
				Name=>"r".$index,
				Rule=>"transportation",
				Rate=>$expr,
				Prefac=>1,
				sbmlVolumeFactor=>$cin
			);
			push @{$rxn->Mds}, $Ae;
			push @{$rxn->Rhs}, $A;
			if ($err=$rxnlist->add($rxn)) { return $err; }
		}

		#	[4] A -> empty, pout*[A]
		if ($k4 ne '0') {
			$index=$#{$rxnlist->Array}+2;
			($expr,undef,$err)=Expression->newExpression($k4,'algebra');
			if ($err) { return $err; }
			$rxn=Reaction->new(
				Name=>"r".$index,
				Rule=>"transportation",
				Rate=>$expr,
				Prefac=>1,
				sbmlVolumeFactor=>$cin
			);
			push @{$rxn->Lhs}, $A;
			if ($err=$rxnlist->add($rxn)) { return $err; }
		}

		return '';
	}

	sub add
	{
		my $rxnlist = shift;  # ReactionList ref

		my $rxn = shift;
		ref $rxn eq 'Reaction'
			|| return "ReactionList: Attempt to add non-reaction object $rxn to ReactionList.";   
		push @{$rxnlist->Array}, $rxn;

		# continue adding reactions (recursive)
		if ( @_ )
		{  return $rxnlist->add(@_);  }
		else
		{  return '';  }
	}

	sub writeMoDeL 
	{
		my $rxnlist=shift;
		my $slist=shift;
		my $out = "";

		# find longest reaction name
		my $max_length = 0;
		foreach my $rxn (@{$rxnlist->Array})
		{
			$max_length = ($max_length >= length $rxn->Name) ? $max_length : length $rxn->Name;
		}

		my $irxn = 1;
		$out .= "<reactions>\n";
		foreach my $rxn (@{$rxnlist->Array}) {
			$out .= sprintf "%5d", $irxn;
			$out .= sprintf "  %-${max_length}s ", $rxn->Name;   
			my @lhsspecs=();
			foreach my $rspec (@{$rxn->Lhs}) {
				push (@lhsspecs, "  ".$slist->Hash->{$rspec}->Name."  ");
			}
			foreach my $mspec (@{$rxn->Mds}) {
				push (@lhsspecs, "  (".$slist->Hash->{$mspec}->Name.")  ");
			}
			my @rhsspecs=();
			foreach my $pspec (@{$rxn->Rhs}) {
				push (@rhsspecs, "  ".$slist->Hash->{$pspec}->Name."  ");
			}
			$out .= sprintf "  %10s  ->  %-10s  ", join('+',@lhsspecs), join('+',@rhsspecs);
			if ($rxn->Prefac != 1) {
				$out .= sprintf "  %3.3f * ( %-s )  ", $rxn->Prefac, $rxn->Rate->String;
			}
			else { $out .= sprintf "  %-s  ", $rxn->Rate->String; }
			if ($rxn->RuleIndex) {
				$out .= "  #".($rxn->RuleIndex+1)."\n";
			}
			else { $out.="\n"; }
			++$irxn;
		}
		$out .= "</reactions>\n";

		return $out;
	}

	sub writeSBML {
		my $rxnlist=shift;
		my $sbmlModel=shift;
		foreach my $rxn (@{$rxnlist->Array}) {
			my $sbmlrxn=$sbmlModel->createReaction();
			if(my $errcode=$sbmlrxn->setId($rxn->Name)) {return $errcode;}
			if(my $errcode=$sbmlrxn->setReversible(0)) {return $errcode;}
			foreach my $specname (@{$rxn->Lhs}) {
				my $spr=$sbmlrxn->createReactant();
				if(my $errcode=$spr->setSpecies($specname)) {return $errcode;}
			}
			foreach my $specname (@{$rxn->Mds}) {
				my $mspr=$sbmlrxn->createModifier();
				if(my $errcode=$mspr->setSpecies($specname)) {return $errcode;}
			}
			foreach my $specname (@{$rxn->Rhs}) {
				my $spr=$sbmlrxn->createProduct();
				if(my $errcode=$spr->setSpecies($specname)) {return $errcode;}
			}
			my $kl=$sbmlrxn->createKineticLaw();
			my $rate_formula=$rxn->Rate->String;
			if ($rxn->Prefac != 1) {
				$rate_formula=$rxn->Prefac."*($rate_formula)";
				if ($rxn->sbmlVolumeFactor) {
					$rate_formula.='*'.$rxn->sbmlVolumeFactor;
				}
			}
			else {
				if ($rxn->sbmlVolumeFactor) {
					$rate_formula="($rate_formula)*".$rxn->sbmlVolumeFactor;
				}
			}
			if (my $errcode=$kl->setFormula($rate_formula)) {return $errcode;}
		}
		return '';
	}
}

1;
__END__
